"""
The query root of GitHub's GraphQL interface.
"""
type Query {

  """
  Lookup a organization by login.
  """
  organization(
    """
    The organization's login.
    """
    login: String!
  ): Organization

}

"""
A list of repositories owned by the subject.
"""
type RepositoryConnection {
  """
  A list of edges.
  """
  edges: [RepositoryEdge]

  """
  A list of nodes.
  """
  nodes: [Repository]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!

  """
  The total size in kilobytes of all repositories in the connection.
  """
  totalDiskUsage: Int!
}

"""
An edge in a connection.
"""
type RepositoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Repository
}

"""
A repository contains the content for a project.
"""
type Repository implements Node & PackageOwner & ProjectOwner & ProjectV2Recent & RepositoryInfo & Starrable & Subscribable & UniformResourceLocatable {
  
  """
  The number of kilobytes this repository occupies on disk.
  """
  diskUsage: Int

  """
  Returns how many forks there are of this repository in the whole network.
  """
  forkCount: Int!

  """
  A list of direct forked repositories.
  """
  forks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    If non-null, filters repositories according to privacy
    """
    privacy: RepositoryPrivacy
  ): RepositoryConnection!

  """
  The name of the repository.
  """
  name: String!

  """
  The SSH URL to clone this repository
  """
  sshUrl: GitSSHRemote!

  """
  The HTTP URL for this repository
  """
  url: URI!

}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
The privacy of a repository
"""
enum RepositoryPrivacy {
  """
  Private
  """
  PRIVATE

  """
  Public
  """
  PUBLIC
}

"""
Git SSH string
"""
scalar GitSSHRemote

"""
An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.
"""
scalar URI

"""
An account on GitHub, with one or more owners, that has repositories, members and teams.
"""
type Organization {

  """
  The organization's public profile name.
  """
  name: String

 """
  The HTTP URL for this organization.
  """
  url: URI!

  """
  A list of repositories that the user owns.
  """
  repositories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

  ): RepositoryConnection!

}